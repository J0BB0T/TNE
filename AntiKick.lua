--[[
          ...                               .---:                                                                                             
         .%%%-                             *%%%#*                                                 :===                                        
         .%%%-    .::.  ... ...      ... .=%%%:.. ...     ..     .:.        .:..       .:.  ...  .=%%#..     ..:.      ...  .:                
         .%%%-  =#%%%%%*%%% -%%#    -%%#.*%%%%%%*.%%%.   *%%+ .*%%%%%+   -*%%%%%#=  :*%%%%%*%%%-.%%%%%%%: .+#%%%%%*-  :%%%:#%%:               
         .%%%- *%%#-::=#%%%  =%%*  .#%%: .=%%#....%%%.   *%%+ =%%#      *%%*-::=*=.:%%%=::-*%%%- .=%%#.. :%%%=::-#%%+ :%%%#+--                
         .%%%-.%%%:    :%%%   *%%= *%%-   -%%#   .%%%.   *%%+  +#%%#*- .%%%.       +%%+     #%%-  -%%#   *%%=    .%%%.:%%%:                   
    :=: .=%%%. #%%+   .*%%%    #%%*%%=    -%%#   .%%%-  .#%%+      *%%+ #%%=   :-. =%%#:   -%%%-  -%%#   =%%#.   +%%# :%%%                    
   -%%%%%%%%-  .*%%%##%%%%%    .#%%%+     -%%#    +%%%##%#%%+ =%%#*#%%- .*%%%#%%%*. =%%%##%%%%%-  .#%%%#: =#%%%#%%%+. :%%%                    
     :====:      .-===:.---     =%%*      .---     .-==-.:--:  .-===-      -===-.     :===- ---.    -==-    :-===:    .---                    
                               :%%#.                                                                                                          
                               ===.                                                                                                           
--]]

-- Jayfuscator V1.2.1 --

return(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,ba,ba)local ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co=93,69,97,10,21,88,88,59,55,93,25,78,83,61,85,52,49,24,73,78,36,75,88,50,70,65,94,75,45,71,64,53,15,64,74,66,31,18,87,66,90,77,13,29,27,63,73,20,28,10,50 while ba~=82 do if bb>=763 then if bb<=1046 then if bb>=936 then if bb>=1000 then if bb<=1000 then bb=1021 do ck=1 end else if bb>1023 then do cf=function()local cp cp=bg(bm,ck,ck)ck=(ck+1);return cp;end end bb=1074 else bb=1046 bd=function()local cp,cq,cr,cs cq,cs,cp,cr=bg(bm,ck,(ck+3))ck=(ck+4);do return((cr*16777216)+(cp*65536)+(cs*256)+cq);end end end end else if bb>=953 then if bb>960 then co=function(cp,cq,cr,cs)local cs cs=((cp/2^(cq-1))%2^((cr-1)-(cq-1)+1))return(cs-cs%1);end bb=1000 else bb=985 bc=(bit_lib and bit_lib.bxor or function(cp,cq)cp=cp%(2^32)cq=cq%(2^32)local cr,cs=0,1 while cp>0 and cq>0 do local ct,cu=cp%16,cq%16 cr=cr+cg[ct+1][cu+1]*cs cp=(cp-ct)/16 cq=(cq-cu)/16 cs=cs*n end cr=cr+cp*cs+cq*cs return cr end)end else bb=953 cc=function(n,cp,cq,cr,cr)local cr,cs,ct=80,36,54,54,54,83,80,33,99,86,27,91,38 while cr~=33 do if cs>=126 then if cs<=126 then ct=(ct-ct%1)cs=161 else if cs<185 then cs=189 return ct else cr=33;end end else if cs>=55 then if cs>58 then cs=126 ct=((cp/cl[n])%cl[cq])else cs=80 ct=nil end else cs=55 ct=nil end end end end end end else if bb>=837 then if bb>=884 then if bb>889 then bb=936 for n=1,31 do cl[n]=bs do bs=(bs*2)end end else do bs=2 end bb=919 end else cl={[0]=1}bb=884 end else if bb>770 then bx=(2^52)bb=837 else do br=''end bb=810 end end end else if bb>=1246 then if bb>=1342 then if bb>=1371 then if bb>1375 then ba=82;else bb=1418 return bp(bt(bj()),{},bj())();end else bb=1371 bp=function(n,ba,cp,cq)local cq,cr,cs,ct,cu cq=n[93]do cu=n[164]end ct=ch cs=n[26]do cr=n[58]end return function(...)local n,ct,cv,cw,cx,cy,cz,da,db cz=1 cv=-1 ct=-1 db={}da={...}cy=(bu('#',...)-1)cw={}do cx={}end for ct=0,cy do if(not(ct<cs))then db[(ct-cs)]=da[(ct+1)];else cx[ct]=da[(ct+1)];end;end;n=(cy-cs+1)do while true do local cs,ct,cy,da,dc,dd,de,df,dg,dh da=cq[cz]dd=da[188]df=da[j]dc=da[122]dg=da[168]do dh=da[54]end cs=da[31]do ct=da[11]end cy=da[146]de=da[170]if not(dd<37)then if not(dd>54)then if not(da[u]<46)then if not(dd<50)then if not(dd<52)then do if not(dd<53)then if(da[188]<54)then local j,u do j=cy end u=cx[j]for cs=(j+1),da[54]do u=(u..cx[cs]);end;cx[da[122]]=u;else cx[dc]=bp(cr[cy],nil,cp);end else cx[dc]={};end end else do if(dd<51)then local j j=dc do do return cx[j](bk(cx,(j+1),cv))end end;else cx[dc]=(cx[cy]%cu[dh]);end end end else if not(dd<48)then if(dd<z)then local j do j=dc end cv=(j+n-1);for n=j,cv do local u u=db[(n-j)]cx[n]=u;end;else for j=dc,cy do cx[j]=nil;end;end else if 46==da[188]then local j j=dc do do return cx[j](bk(cx,(j+1),cy))end;end else local j j=dc cx[j]=cx[j](bk(cx,j+1,cv));end end end else if not(da[188]>40)then if not(da[188]>38)then if(dd>37)then cx[dc]=(cx[cy]*cu[dh]);else if((cu[dc]<cx[dh]))then cz=cy;end;end else if(da[188]>39)then cx[dc][cu[cy]]=cu[dh];else cq[cz]={[54]=56,[122]=4,[146]=8,[188]=dd-17,[31]=0};cz=(cz-i);end end else if not(dd<43)then if not(dd>43)then cx[dc]=(not cx[cy]);else if not(da[188]~=44)then do cz=cy;end else cx[dc]=(cx[cy]+cu[dh]);end end else if(dd<42)then local i,j,n,u,z j=dc do n=da[54]end z=(j+2)i={cx[j](cx[j+1],cx[z])}for cs=1,n do cx[(z+cs)]=i[cs]end u=cx[(j+3)]if u then cx[z]=u else cz=cy;end;else cz=((cu[dc]<cx[da[54]])and cy or cz)end end end end else do if not(dd>63)then if not(dd>58)then if not(dd>56)then if not(dd~=55)then cx[dc]=cx[da[146]][cu[dh]];else local i i=da[122]cx[i]=cx[i]();end else do if not(da[188]~=57)then do cx[dc]=nil;end else cx[dc]=#cx[cy];end end end else if not(dd>60)then if(dd<60)then local i,j,n i=dc do n={cx[i](cx[i+1])}end j=0 do for u=i,dh do j=(j+r);do cx[u]=n[j];end end end else cx[dc][cu[cy]]=cx[dh];end else if not(dd<62)then if 62==dd then cx[dc]=(cx[da[146]]+cx[dh]);else cx[da[122]]=(cx[cy]/cu[dh]);end else cx[dc]=cx[da[146]][cx[dh]];end end end else if not(dd>68)then do if not(dd>65)then if(dd>64)then local i i={}do if(#cw>q)then for j=1,#cw do local n n=cw[j]do for j=0,#n do local q,r,u r=n[j]u=r[1]q=r[2]if(u==cx and q>=0)then i[q]=u[q]r[1]=i end end end end end end do return da[dh],cx[dc];end else cq[cz]={[188]=dd-9,[122]=2,[146]=2,[31]=0,[54]=76};cz=(cz-1);end else do if not(da[d]<67)then do if(dd>67)then local d,i,j i=dc j=cx[i]d=cx[(i+2)]if((d>0))then do if((j>cx[i+1]))then cz=cy;else cx[(i+3)]=j;end end elseif((j<cx[i+b]))then cz=cy;else cx[(i+3)]=j;end else local b,d b=dc d={}do if(#cw>0)then for i=1,#cw do local j do j=cw[i]end for i=0,#j do local n,q,r q=j[i]n=q[1]r=q[2]if(n==cx and r>=0)then d[r]=n[r]q[1]=d end end end end end return cx[b],cx[(b+1)]end end else do cq[cz]={[122]=1,[31]=0,[146]=0,[188]=da[188]-11,[54]=22};end cz=(cz-1);end end end end else if not(dd<71)then if not(dd>71)then local b b=dc cx[b](bk(cx,(b+1),da[146]))else if 72==dd then cq[cz]={[54]=0,[k]=0,[31]=0,[188]=da[188]-60,[122]=0};do cz=(cz-1);end elseif(cx[dh]==cx[dc])then cz=cy;end end else if not(dd~=69)then local b,d,i do i=dc end d={cx[i](bk(cx,i+1,cv))}b=0 for j=i,dh do b=(b+1);cx[j]=d[b];end else local b,d do d=dc end b={}if(#cw>0)then for i=1,#cw do local j do j=cw[i]end do for i=0,#j do local k,n,q n=j[i]do q=n[1]end k=n[2]do if(q==cx and k>=0)then b[k]=q[k]n[1]=b end end end end end end return bk(cx,d,cv);end end end end end end else if not(dd<18)then if not(dd<27)then if not(dd<32)then if not(dd>33)then if(dd>32)then local b,d,i i=dc b=cx[i]d=cy for j=1,d do b[j]=cx[(i+j)]end;else while(not cx[dc])do cz=cy;break end end else do if not(dd<35)then if 35==dd then cz=((cx[dc]==cx[dh])and cy or cz)else cq[cz]={[122]=1,[54]=22,[146]=0,[31]=0,[188]=dd- -19};cz=(cz-p);end else cx[dc]=cx[cy];end end end else if not(dd>28)then if(dd>27)then local b,d b=dc do d=cx[cy]end cx[(b+1)]=d;do cx[b]=d[cu[dh]];end else cq[cz]={[122]=1,[31]=0,[188]=dd- -28,[146]=0,[54]=22};cz=(cz-1);end else if not(dd<30)then if 30==dd then cu=ch[dc](cu)else cx[dc]=(cx[cy]-cx[dh]);end else cq[cz]={[146]=12,[54]=22,[188]=dd-7,[122]=3,[31]=s};cz=(cz-1);end end end else if not(dd>21)then if not(dd>19)then if(dd>18)then if(cu[dh]==cx[dc])then cz=cy;end;else cx[de]=(function()cx[dc]=bp(cr[dg],nil,cp);end)end else if(dd<21)then cz=((cu[dc]==cu[dh])and cy or cz)else do while(cx[dc]~=cu[dh])do cz=cy;break end end end end else do if not(dd>23)then do if(dd<23)then do cx[da[122]]=cu[cy]end else cz=((cx[dc]<cx[dh])and da[146]or cz)end end else if not(dd<y)then if(dd<26)then local b,d,i d=dc i=cx[(d+2)]do b=(cx[d]+i)end cx[d]=b;do if((i>0))then if(not(b>cx[d+1]))then cz=cy;cx[(d+3)]=b;end elseif(not(b<cx[d+1]))then cz=cy;do cx[(d+3)]=b;end end end else local b b=dc cx[b](bk(cx,(b+1),cv))end else local b,d,i,j b=da[122]d,i=bf(cx[b](cx[(b+1)]))cv=(i+b-1)do j=0 end for i=b,cv do j=(j+1);do cx[i]=d[j];end end;end end end end end else do if not(dd>8)then if not(dd<4)then do if not(dd<6)then if not(dd<7)then if not(dd~=7)then local b b=dc cx[b](cx[(b+1)])else cx[dc]=ba[cy];end else cq[cz]={[146]=0,[54]=2,[31]=0,[188]=dd- -41,[122]=27};cz=(cz-1);end else if 4==dd then cz=((cu[dc]~=cu[dh])and cy or cz)else do cq[cz]={[146]=1,[188]=dd- -23,[54]=9,[31]=0,[122]=3};end cz=(cz-1);end end end else if not(dd>1)then if(dd<1)then local b,d,i,j d=dc j,i=bf(cx[d](bk(cx,(d+1),cy)))cv=(i+d-1)do b=0 end for i=d,cv do b=(b+1);cx[i]=j[b];end;else if(cx[dh]~=cx[dc])then cz=cy;end;end else if(dd<m)then local b,d,i b=cr[cy]d=nil i={}d=be({},{__index=function(j,j)local j=i[j];return j[1][j[2]];end,__newindex=function(j,j,k)local j=i[j]j[1][j[2]]=k;end;});for j=1,da[54]do local k do k=da[75][j]end if k[1]then do i[(j-1)]={cx,k[w],nil,nil};end else i[(j-1)]={ba,k[2],nil,nil};end;cw[(#cw+1)]=i;end;cx[da[122]]=bp(b,d,cp);else local b b=dc cx[b]=cx[b](bk(cx,b+1,cy));end end end else do if not(da[188]<13)then if not(dd>14)then do if 13==dd then cx[dc]=cp[cu[da[146]]];else do do return cx[dc]end end end end else if not(dd<16)then if not(dd~=16)then cx[dc][cx[da[146]]]=cx[da[54]];else while cx[da[122]]do cz=cy;break end end else cq[cz]=bz[da[31]];cz=cy;end end else if not(da[188]>10)then if not(dd~=9)then if((cx[dc]<cx[dh]))then cz=cy;end;else local b b=dc cx[b]=cx[b](cx[b+1]);end else do if 11==dd then cq[cz]={[122]=2,[54]=0,[146]=30,[188]=dd- -2,[31]=0};cz=(cz-1);else local b,d b=dc d={}do for i=1,#cw do local j j=cw[i]for i=0,#j do local k,m,n n=j[i]do m=n[1]end k=n[2]if(m==cx and k>=b)then d[k]=m[k];do n[1]=d;end end;end;end;end end end end end end end end end end cz=(cz+1);end;end end;end end else if bb<=1246 then bb=1290 bt=function(b,d)local d,i,j,k,m,n,p,q=46,46,71,90,10,90,26,55,88,10,63,53,35,88,59,97,90,64,21,55,71,12,49,47 while d~=36 do if i>=301 then if i<=365 then if i<=324 then if i>305 then i=347 for r=1,bd()do local s,u,w,y,z,ba=94,56,50,97,99,65,13,60,51,90,82,90,12,55,26,22,27,80,93,34,31,82,45,10 while s~=50 do if u<=391 then if u<=168 then if u<=97 then if u<90 then u=97 w,y,z,ba=nil else ba={{},nil}u=144 end else if u>152 then u=213 ba[75]={};else ba[44]=cf();u=168 end end else if u>=305 then if u>=343 then if u>345 then do ba[6]=w end u=436 else w=co(y,c,2)u=391 end else u=343 z=bd()end else if u>222 then u=305 do y=bd()end else u=260 do if not(cf()~=1)then for c=1,cf()do ba[75][c]={cf()==g,bd()}end end end end end end else if u>=541 then if u<=568 then if u>547 then u=614 ba[11]=-ba[122]else ba[31]=co(y,12,20);u=568 end else if u>=651 then if u<659 then u=666 q[r]=ba;else break end else ba[170]=-ba[54]u=651 end end else if u<=475 then if u<466 then u=475 do ba[188]=co(z,1,11);end else u=495 ba[122]=co(y,3,11);end else if u>499 then u=541 ba[54]=co(y,21,29);else do ba[146]=co(z,12,33);end u=512 end end end end end end else j[58]=n;i=324 end else if i>351 then i=396 k=bd()else j[93]=q;i=365 end end else if i>=479 then if i<=479 then j[164]=p i=510 else if i<537 then i=541 return j;else d=36;end end else if i>400 then i=479 for c=1,k do local d,g,r,s=81,69,31,32,14,60,43,36,85,43,91,89,12 while d~=38 do if g<=149 then if g<=69 then g=107 r,s=nil else if g>110 then g=166 do s=nil end else r=cf()g=149 end end else if g>=215 then if g<243 then g=247 p[c]=s;else d=38;end else g=215 if(3==r)then s=(0~=cf());elseif(not(r~=4))then s=bl();elseif(not(r~=2))then do s=cm();end elseif(1==r)then s=b[cm()];end;end end end end else i=438 p={}end end end else if i<=124 then if i<=70 then if i<62 then j,k,m,n,p,q=nil i=70 else q={}i=106 end else if i>115 then j={}i=173 else n={}i=124 end end else if i<=194 then if i>182 then i=239 for b=(#bz+1),(#bz+m)do local c,d,g,k,p=76,61,38,50,10,14,65,75,37,21,10,91,20,95,19,54,79,76,17,10,23,52 while c~=47 do if d>=316 then if d<=421 then if d<=358 then if d>320 then d=403 p[168]=co(k,12,20);else p[122]=co(k,3,11);d=358 end else if d>406 then d=457 p[146]=co(g,12,33);else d=421 p[54]=co(k,21,29);end end else if d<=475 then if d<473 then d=475 p[11]=-p[122]else d=501 p[170]=-p[54]end else if d<541 then d=545 do bz[b]=p;end else break end end end else if d>=180 then if d>=227 then if d>233 then d=316 p[188]=co(g,1,11);else d=272 p[6]=co(k,1,2);end else if d>182 then p[31]=cf();d=227 else g=bd()d=203 end end else if d<=93 then if d<84 then d=93 g,k,p=nil else p={}d=118 end else if d<146 then d=155 p[44]=cf();else d=180 k=bd()end end end end end end else i=194 m=bd()end else if i>245 then for b=1,bd()do n[b-1]=bt();end i=301 else j[26]=cf();i=277 end end end end end end else if bb<1311 then bb=1316 ch={}else cn={}bb=1342 end end end else if bb>=1126 then if bb>=1151 then if bb>1154 then bb=1246 bz={}else bf=function(...)return{...},bu('#',...)end bb=1198 end else cm=function(b,b)local b,c,d,g=81,41,38,66,39,25,73,71,38,98,12,88,43 while b~=44 do if c<=126 then if c<=41 then d,g=nil c=85 else if c>92 then c=166 do d=bm:sub(ck,(ck+g-1))end else c=126 g=bd()end end else if c>=201 then if c>204 then break else c=250 return d;end else c=201 ck=(ck+g);end end end end bb=1151 end else if bb>1082 then bb=1126 bl=function()local b,c,d,g,i,j,k,m=72,36,81,29,42,21,76,39,68,50,69,25,58,28,59,25,33,36,68,25 while b~=31 do if c<=207 then if c>=125 then if c<=125 then j=bd()c=169 else if c>174 then c=247 k=((-1)^cc(31,j,1))else do if((i==0 and j==0))then return 0 end end c=207 end end else if c<77 then d,g,i,j,k,m=nil c=82 else do i=bd()end c=125 end end else if c<=328 then if c>=289 then if c>298 then d=1 c=344 else g=(cc(0,j,x)*4294967296+i)c=328 end else c=289 m=cc(20,j,11)end else if c>=370 then if c>372 then b=31;else c=413 return(k*(2^(m-1023))*(g/bx+d))end else c=370 if not(m~=0)then if 0~=g then m=1 do d=0 end else return(k*0)end elseif 2047~=m then else if 0==g then do return(k*(0/0))end else return(k*(1/0))end end end end end end end else ce=function()local b,c b,c=bg(bm,ck,(ck+2))ck=(ck+2);return((c*256)+b);end bb=1092 end end end end else if bb>=468 then if bb<=583 then if bb>=537 then if bb<=537 then do ca=(function(b,c,c,c)if'number'==bi(b)then return true else do return false end end end)end bb=558 else if bb<575 then do by=math.abs end bb=583 else bb=611 bv=math.floor end end else if bb<502 then bb=508 bu=select else bb=537 do bi=type end end end else if bb>=680 then if bb<=680 then for b=0,255 do bh[b]=bn(b);end bb=719 else if bb<732 then bb=734 bm=cjfunction(b,c)return bh[bo(b,16)]end)else cg={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,},{1,0,3,2,h,4,7,6,9,8,11,10,13,12,15,14,},{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13,},{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12,},{4,5,6,7,0,1,2,3,a,13,14,15,8,9,10,11,},{5,4,7,6,1,0,3,2,13,12,15,14,e,8,11,10,},{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9,},{7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,},{8,9,10,11,o,t,14,15,0,1,2,3,4,5,6,7,},{l,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6,},{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5,},{11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4,},{12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3,},{13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2,},{14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1,},{v,14,13,12,11,f,9,8,7,6,5,4,3,2,1,0,},nil,nil}bb=763 end end else if bb<=611 then bb=633 do bk=(unpack or table.unpack)end else if bb>641 then bb=680 bh={}else bb=665 bo=tonumber end end end end else if bb<=198 then if bb<=96 then if bb<90 then bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co=nil bb=96 else bg=string.byte bb=140 end else if bb>=158 then if bb>163 then bb=230 cj=string.gsub else do bw=string.sub end bb=198 end else bb=158 bn=string.char end end else if bb>=341 then if bb>=386 then if bb>393 then bb=468 be=setmetatable else bj=(getfenv or function()return _ENV end)bb=425 end else bb=386 cd=math.ldexp end else if bb<=230 then bb=270 ci=string.rep else if bb>278 then bq=table.insert bb=341 else cb=table.concat bb=313 end end end end end end end end)(12,1,1,188,9,10,0,5,1,44,146,9,3,16,12,1,0,1,0,13,188,15,2,20,25,49)
